{"version":3,"sources":["components/CharacterCard.js","components/CharacterList.js","components/Filters.js","services/getDataFromApi.js","components/App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","src","character","image","alt","name","specie","CharacterList","console","log","characterElement","characters","map","index","key","id","Filters","htmlFor","type","onChange","ev","handleFilter","target","value","getDataFromApi","fetch","then","response","json","data","results","species","planet","origin","status","App","useState","setCharacters","nameFilter","setName","useEffect","filteredCharacters","filter","toUpperCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAiBeA,MAdf,SAAuBC,GACrB,OACE,wBAAIC,UAAU,QACZ,yBACEA,UAAU,YACVC,IAAKF,EAAMG,UAAUC,MACrBC,IAAG,oBAAeL,EAAMG,UAAUG,QAEpC,wBAAIL,UAAU,eAAeD,EAAMG,UAAUG,MAC7C,uBAAGL,UAAU,qBAAqBD,EAAMG,UAAUI,UCIzCC,EAZO,SAACR,GACrBS,QAAQC,IAAIV,GACZ,IAAMW,EAAmBX,EAAMY,WAAWC,KAAI,SAACV,EAAWW,GACxD,OAAO,kBAAC,EAAD,CAAeC,IAAKZ,EAAUa,GAAIb,UAAWA,OAEtD,OACE,iCACE,wBAAIF,UAAU,SAASU,KCYdM,EArBC,SAACjB,GAKf,OACE,8BACE,2BAAOC,UAAU,4BAA4BiB,QAAQ,QAArD,uBAGA,2BACEjB,UAAU,mBACVkB,KAAK,OACLb,KAAK,OACLU,GAAG,OACHI,SAde,SAACC,GACpBrB,EAAMsB,aAAaD,EAAGE,OAAOC,YCgBlBC,EApBQ,WACrB,OAAOC,MACL,uFAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQlB,KAAI,SAACV,GAEvB,MAAO,CACLa,GAAIb,EAAUa,GACdZ,MAAOD,EAAUC,MACjBE,KAAMH,EAAUG,KAChBC,OAAQJ,EAAU6B,QAClBC,OAAQ9B,EAAU+B,OAAO5B,KAEzB6B,OAAQhC,EAAUgC,eCuBbC,EA/BH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACTzB,EADS,KACG0B,EADH,OAEcD,mBAAS,IAFvB,mBAETE,EAFS,KAEGC,EAFH,KAGhBC,qBAAU,WACRhB,IAAiBE,MAAK,SAACG,GACrBQ,EAAcR,QAEf,IAIH,IAKMY,EAAqB9B,EAAW+B,QAAO,SAACxC,GAC5C,OAAOA,EAAUG,KAAKsC,cAAcC,SAASN,EAAWK,kBAK1D,OAFAnC,QAAQC,IAAIgC,GAGV,yBAAKzC,UAAU,OACb,kBAAC,EAAD,CAASqB,aAbQ,SAACQ,GACpBrB,QAAQC,IAAI,4BAA0BoB,GACtCU,EAAQV,MAYN,kBAAC,EAAD,CAAelB,WAAY8B,MCpBbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.d3115280.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/App.scss';\n\nfunction CharacterCard(props) {\n  return (\n    <li className='card'>\n      <img\n        className='card__img'\n        src={props.character.image}\n        alt={`Imagen de ${props.character.name}`}\n      />\n      <h4 className='card__title'>{props.character.name}</h4>\n      <p className='card__description'>{props.character.specie}</p>\n    </li>\n  );\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport '../stylesheets/App.scss';\nimport CharacterCard from './CharacterCard.js';\n\nconst CharacterList = (props) => {\n  console.log(props);\n  const characterElement = props.characters.map((character, index) => {\n    return <CharacterCard key={character.id} character={character} />;\n  });\n  return (\n    <section>\n      <ul className='cards'>{characterElement}</ul>\n    </section>\n  );\n};\n\nexport default CharacterList;\n","import React from 'react';\n\nconst Filters = (props) => {\n  const handleChange = (ev) => {\n    props.handleFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <label className='form__label display-block' htmlFor='name'>\n        Busca un personaje:\n      </label>\n      <input\n        className='form__input-text'\n        type='text'\n        name='name'\n        id='name'\n        onChange={handleChange}\n      />\n    </form>\n  );\n};\n\nexport default Filters;\n","const getDataFromApi = () => {\n  return fetch(\n    'https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json'\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        // console.log(character);\n        return {\n          id: character.id,\n          image: character.image,\n          name: character.name,\n          specie: character.species,\n          planet: character.origin.name,\n          //   episodes: character.(episode.leght),\n          status: character.status,\n        };\n      });\n    });\n};\nexport default getDataFromApi;\n","import React, { useEffect, useState } from 'react';\nimport '../stylesheets/App.scss';\nimport CharacterList from './CharacterList.js';\nimport Filters from './Filters.js';\n// import CharacterDetail from './CharacterDetail';\nimport getDataFromApi from '../services/getDataFromApi.js';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setName] = useState('');\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  // console.log(characters);\n\n  const handleFilter = (data) => {\n    console.log('estÃ¡n escribiendo algo', data);\n    setName(data);\n  };\n\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(nameFilter.toUpperCase());\n  });\n\n  console.log(filteredCharacters);\n\n  return (\n    <div className='App'>\n      <Filters handleFilter={handleFilter} />\n      <CharacterList characters={filteredCharacters} />\n      {/* <CharacterDetail /> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}