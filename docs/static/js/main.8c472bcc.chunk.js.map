{"version":3,"sources":["images/Rick_and_Morty.png","components/Header.js","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","components/CharacterDetail.js","services/getDataFromApi.js","components/CharacterDoesNotExist.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","title","CharacterCard","props","to","character","name","image","specie","CharacterList","characterElement","characters","map","index","key","id","Filters","htmlFor","type","onChange","ev","handleFilter","target","value","CharacterDetail","planet","episodes","length","status","getDataFromApi","fetch","then","response","json","data","results","species","origin","episode","CharacterDoesNotExist","App","useState","setCharacters","nameFilter","setName","useEffect","filteredCharacters","filter","toUpperCase","includes","exact","path","render","characterName","match","params","clickedCharacter","find","undefined","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c472bcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty.75509f2e.png\";","import React from 'react';\nimport logo from '../images/Rick_and_Morty.png';\n\nfunction Header() {\n  return (\n    <header className='Header'>\n      <img\n        className='Header__image'\n        src={logo}\n        alt='Rick and Morty'\n        title='Rick and Morty'\n      />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/App.scss';\n\nfunction CharacterCard(props) {\n  return (\n    <li className='card'>\n      <Link to={`/character/${props.character.name}`}>\n        <img\n          className='card__img'\n          src={props.character.image}\n          alt={`Imagen de ${props.character.name}`}\n        />\n        <h4 className='card__title'>{props.character.name}</h4>\n        <p className='card__description'>{props.character.specie}</p>\n      </Link>\n    </li>\n  );\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport '../stylesheets/App.scss';\nimport CharacterCard from './CharacterCard.js';\n\nconst CharacterList = (props) => {\n  const characterElement = props.characters.map((character, index) => {\n    return <CharacterCard key={character.id} character={character} />;\n  });\n  return (\n    <section>\n      <ul className='cards'>{characterElement}</ul>\n    </section>\n  );\n};\n\nexport default CharacterList;\n","import React from 'react';\n\nconst Filters = (props) => {\n  const handleChange = (ev) => {\n    props.handleFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <label className='label' htmlFor='name'>\n        Busca un personaje:\n      </label>\n      <input type='text' name='name' id='name' onChange={handleChange} />\n    </form>\n  );\n};\n\nexport default Filters;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/App.scss';\n\nconst CharacterDetail = (props) => {\n  return (\n    <div className='background'>\n      <Link to='/'>\n        <button className='btn'>volver al listado</button>\n      </Link>\n      <div className='cards'>\n        <div className='card_detail'>\n          <img\n            className='card_img'\n            src={props.character.image}\n            alt={props.character.name}\n          />\n          <section>\n            <header className='card__header'>\n              <h2 className='card__title'>{props.character.name}</h2>\n              <span className='button'></span>\n            </header>\n            <ul>\n              <li>Especie:{props.character.specie}</li>\n              <li>Planeta de origen:{props.character.planet}</li>\n              <li>Aparece en: {props.character.episodes.length} episodios</li>\n              <li>Estatus: {props.character.status}</li>\n            </ul>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CharacterDetail;\n","const getDataFromApi = () => {\n  return fetch(\n    'https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json'\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          image: character.image,\n          name: character.name,\n          specie: character.species,\n          planet: character.origin.name,\n          episodes: character.episode,\n          status: character.status,\n        };\n      });\n    });\n};\nexport default getDataFromApi;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/App.scss';\n\nconst CharacterDoesNotExist = () => {\n  return (\n    <div>\n      <Link to='/'>\n        <button className='btn'>volver al listado</button>\n      </Link>\n      <h1>Lo siento, no existe personaje con ese nombre</h1>\n    </div>\n  );\n};\n\nexport default CharacterDoesNotExist;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport '../stylesheets/App.scss';\nimport Header from './Header.js';\nimport CharacterList from './CharacterList.js';\nimport Filters from './Filters.js';\nimport CharacterDetail from './CharacterDetail';\nimport getDataFromApi from '../services/getDataFromApi.js';\nimport CharacterDoesNotExist from './CharacterDoesNotExist.js';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setName] = useState('');\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  const handleFilter = (data) => {\n    setName(data);\n  };\n\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(nameFilter.toUpperCase());\n  });\n\n  const renderCharacterDetail = (props) => {\n    const characterName = props.match.params.characterName;\n    const clickedCharacter = characters.find((character) => {\n      return character.name === characterName;\n    });\n\n    if (clickedCharacter !== undefined) {\n      return <CharacterDetail character={clickedCharacter} />;\n    } else {\n      return <CharacterDoesNotExist />;\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Header />\n      <Switch>\n        <Route exact path='/'>\n          <Filters handleFilter={handleFilter} />\n          <CharacterList characters={filteredCharacters} />\n        </Route>\n        <Route\n          exact\n          path='/character/:characterName'\n          render={renderCharacterDetail}\n        />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}